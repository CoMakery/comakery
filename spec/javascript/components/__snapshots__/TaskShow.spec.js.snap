// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TaskShow renders correctly without props 1`] = `
<TaskShow
  batch={
    Object {
      "default": "_",
    }
  }
  channels={
    Object {
      "default": "1",
      "email": "",
    }
  }
  csrfToken="00"
  formAction="POST"
  formUrl="/"
  members={
    Object {
      "1": Object {
        "default": "_",
      },
    }
  }
  missionForHeader={null}
  project={
    Object {
      "default": "_",
    }
  }
  projectForHeader={null}
  recipientAddressUrl="/"
  task={
    Object {
      "amount": "100.0",
      "awardTypeId": 10,
      "id": 28,
      "name": "Task name",
      "quantity": 1,
    }
  }
  token={
    Object {
      "decimalPlaces": 8,
      "symbol": "DMT",
    }
  }
  urlOnSuccess="/"
>
  <ProjectSetup
    className="task-award-form"
    current="batches"
    hasBackButton={true}
    missionForHeader={null}
    owner={true}
    projectForHeader={null}
    sidebar={
      <React.Fragment>
        <div
          className="batch-index--sidebar"
        >
          <SidebarItem
            className="batch-index--sidebar--item batch-index--sidebar--item__form"
            iconLeftName=""
            iconLeftUrl=""
            iconRightName=""
            notificationColor=""
            selected={true}
            text="sidebar item"
          />
          <hr
            className="batch-index--sidebar--hr"
          />
        </div>
      </React.Fragment>
    }
    subfooter={
      <React.Fragment>
        <Button
          className="metamask-transfer-btn"
          disabled={false}
          form="task-award-form--form"
          type="submit"
          value="proceed"
        />
        <ButtonBorder
          className=""
          onClick={[Function]}
          value="cancel"
        />
      </React.Fragment>
    }
  >
    <Layout
      category=""
      className="project-setup task-award-form"
      customTitle={
        <ProjectSetupHeader
          current="batches"
          expanded={false}
          missionForHeader={null}
          owner={true}
          projectForHeader={null}
        />
      }
      hasBackButton={false}
      sidebar={
        <React.Fragment>
          <div
            className="batch-index--sidebar"
          >
            <SidebarItem
              className="batch-index--sidebar--item batch-index--sidebar--item__form"
              iconLeftName=""
              iconLeftUrl=""
              iconRightName=""
              notificationColor=""
              selected={true}
              text="sidebar item"
            />
            <hr
              className="batch-index--sidebar--hr"
            />
          </div>
        </React.Fragment>
      }
      subfooter={
        <React.Fragment>
          <Button
            className="metamask-transfer-btn"
            disabled={false}
            form="task-award-form--form"
            type="submit"
            value="proceed"
          />
          <ButtonBorder
            className=""
            onClick={[Function]}
            value="cancel"
          />
        </React.Fragment>
      }
      title={null}
    >
      <div
        className="layout project-setup task-award-form"
      >
        <div
          className="layout--content"
        >
          <div
            className="layout--content--title"
          >
            <ProjectSetupHeader
              current="batches"
              expanded={false}
              missionForHeader={null}
              owner={true}
              projectForHeader={null}
            >
              <styled.div
                backgroundImageUrl={null}
                expanded={false}
              >
                <StyledComponent
                  backgroundImageUrl={null}
                  expanded={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bdVaJa",
                        "isStatic": false,
                        "lastClassName": "ezfsJd",
                        "rules": Array [
                          "
  font-size: 16px;
  font-weight: bold;
  color: white;
  cursor: default;
  margin-bottom: 1em;
  background-color: #201662;
  background-image: url(",
                          [Function],
                          ");
  background-position-x: 50%;
  background-position-y: center;
  background-repeat: no-repeat;
  background-size: cover;
  min-height: 150px;
  display: flex;
  flex-direction: column;
  text-shadow: 1px 1px 1px #3a3a3a;
  box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.1);

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bdVaJa",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-bdVaJa ezfsJd"
                  >
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bwzfXH",
                              "isStatic": true,
                              "lastClassName": "fFBqGW",
                              "rules": Array [
                                "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  flex-wrap: wrap;
  margin: 0.7em;

  @media (max-width: 1024px) {
    flex-direction: column;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bwzfXH",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-bwzfXH fFBqGW"
                        />
                      </StyledComponent>
                    </styled.div>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": true,
                              "lastClassName": "IBoeD",
                              "rules": Array [
                                "
  align-items: center;
  justify-content: center;
  display: flex;
  flex-grow: 2;
  flex-direction: column;

  img {
    max-height: 150px;
    margin-bottom: -50px;
    margin-top: 25px;
    border-radius: 2px;
    box-shadow: 0 10px 20px 0 rgba(32,22,98,.1);
  }

  h1 {
    font-size: 32px;
    font-style: normal;
    font-stretch: normal;
    letter-spacing: normal;
    text-align: center;
    min-height: 100px;
    display: flex;
    align-items: center;
  }

  h2 {
    font-size: 18px;
    text-transform: capitalize;
    font-style: normal;
    font-stretch: normal;
    letter-spacing: normal;
    text-align: center;
    min-height: 100px;
    display: flex;
    align-items: center;
    margin-top: -50px;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-EHOje IBoeD"
                        >
                          <h1>
                            New Project
                          </h1>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </styled.div>
            </ProjectSetupHeader>
          </div>
          <div
            className="layout--content--wrapper"
          >
            <div
              className="layout--content--sidebar"
            >
              <div
                className="batch-index--sidebar"
              >
                <SidebarItem
                  className="batch-index--sidebar--item batch-index--sidebar--item__form"
                  iconLeftName=""
                  iconLeftUrl=""
                  iconRightName=""
                  notificationColor=""
                  selected={true}
                  text="sidebar item"
                >
                  <div
                    className="sidebar-item--wrapper"
                  >
                    <div
                      className="sidebar-item sidebar-item__selected batch-index--sidebar--item batch-index--sidebar--item__form"
                    >
                      <div
                        className="sidebar-item--content"
                      >
                        <div
                          className="sidebar-item--text"
                        >
                          sidebar item
                        </div>
                        <div
                          className="sidebar-item--subchild"
                        />
                      </div>
                      <div
                        className="sidebar-item--left-border"
                      />
                      <div
                        className="sidebar-item--right-border sidebar-item--right-border__"
                      />
                    </div>
                  </div>
                </SidebarItem>
                <hr
                  className="batch-index--sidebar--hr"
                />
              </div>
            </div>
            <div
              className="layout--content--content__sidebared"
            >
              <Flash
                className=""
                messages={Array []}
              >
                <div
                  className="flash-message-container"
                />
              </Flash>
              <div
                className="task-form--form--title"
              >
                Issue Award For Task: Task name
              </div>
              <form
                className="task-award-form--form"
                id="task-award-form--form"
                onSubmit={[Function]}
              >
                <InputFieldDropdown
                  eventHandler={[Function]}
                  name="task[channel_id]"
                  selectEntries={
                    Array [
                      Array [
                        "email",
                        "",
                      ],
                      Array [
                        "default",
                        "1",
                      ],
                    ]
                  }
                  symbolLimit={0}
                  title="communication channel"
                  value=""
                >
                  <InputField
                    checkboxText=""
                    checked={false}
                    className="input-field__dropdown"
                    copyOnClick={false}
                    disabled={false}
                    errorText=""
                    eventHandler={[Function]}
                    imgInputRef={null}
                    imgPreviewDimensions="40x40"
                    imgPreviewUrl=""
                    imgRequirements=""
                    imgVerifier={[Function]}
                    max=""
                    min=""
                    name="task[channel_id]"
                    pattern=".*"
                    placeholder="Please enter value"
                    readOnly={false}
                    recommended={false}
                    required={false}
                    selectEntries={
                      Array [
                        Array [
                          "email",
                          "",
                        ],
                        Array [
                          "default",
                          "1",
                        ],
                      ]
                    }
                    step=""
                    symbolLimit={0}
                    title="communication channel"
                    type="select"
                    value=""
                  >
                    <div
                      className="input-field input-field__dropdown"
                    >
                      <div
                        className="input-field--title"
                      >
                        <span
                          className="input-field--title--title"
                        >
                          communication channel
                        </span>
                        <span
                          className="input-field--title--required"
                        >
                          optional
                        </span>
                      </div>
                      <div
                        className="input-field--content"
                      >
                        <select
                          className="input-field--content__select"
                          disabled={false}
                          name="task[channel_id]"
                          onChange={[Function]}
                          required={false}
                          value=""
                        >
                          <option
                            key=""
                            value=""
                          >
                            email
                          </option>
                          <option
                            key="1"
                            value="1"
                          >
                            default
                          </option>
                        </select>
                      </div>
                    </div>
                  </InputField>
                </InputFieldDropdown>
                <InputFieldWhiteDark
                  eventHandler={[Function]}
                  name="task[email]"
                  placeholder="Enter the recepient email address"
                  required={true}
                  symbolLimit={0}
                  title="email"
                  type="email"
                >
                  <InputField
                    checkboxText=""
                    checked={false}
                    className="input-field__white__dark"
                    copyOnClick={false}
                    disabled={false}
                    errorText=""
                    eventHandler={[Function]}
                    imgInputRef={null}
                    imgPreviewDimensions="40x40"
                    imgPreviewUrl=""
                    imgRequirements=""
                    imgVerifier={[Function]}
                    max=""
                    min=""
                    name="task[email]"
                    pattern=".*"
                    placeholder="Enter the recepient email address"
                    readOnly={false}
                    recommended={false}
                    required={true}
                    selectEntries={Array []}
                    step=""
                    symbolLimit={0}
                    title="email"
                    type="email"
                    value=""
                  >
                    <div
                      className="input-field input-field__white__dark"
                    >
                      <div
                        className="input-field--title"
                      >
                        <span
                          className="input-field--title--title"
                        >
                          email
                        </span>
                        <span
                          className="input-field--title--required"
                        >
                          required
                        </span>
                      </div>
                      <div
                        className="input-field--content"
                      >
                        <input
                          className="input-field--content__text"
                          name="task[email]"
                          onChange={[Function]}
                          onClick={null}
                          pattern=".*"
                          placeholder="Enter the recepient email address"
                          readOnly={false}
                          required={true}
                          type="email"
                          value=""
                        />
                      </div>
                    </div>
                  </InputField>
                </InputFieldWhiteDark>
                <InputFieldDescriptionMiddle
                  eventHandler={[Function]}
                  name="task[message]"
                  placeholder="Give a shoutout or offer some tips to the person who completed the task"
                  recommended={true}
                  symbolLimit={150}
                  title="message"
                >
                  <InputField
                    checkboxText=""
                    checked={false}
                    className="input-field__description-middle"
                    copyOnClick={false}
                    disabled={false}
                    errorText=""
                    eventHandler={[Function]}
                    imgInputRef={null}
                    imgPreviewDimensions="40x40"
                    imgPreviewUrl=""
                    imgRequirements=""
                    imgVerifier={[Function]}
                    max=""
                    min=""
                    name="task[message]"
                    pattern=".*"
                    placeholder="Give a shoutout or offer some tips to the person who completed the task"
                    readOnly={false}
                    recommended={true}
                    required={false}
                    selectEntries={Array []}
                    step=""
                    symbolLimit={150}
                    title="message"
                    type="textarea"
                    value=""
                  >
                    <div
                      className="input-field input-field__description-middle"
                    >
                      <div
                        className="input-field--title"
                      >
                        <span
                          className="input-field--title--title"
                        >
                          message
                        </span>
                        <span
                          className="input-field--title--required"
                        >
                          recommended
                        </span>
                        <span
                          className="input-field--title--counter"
                        >
                          0
                          /
                          150
                        </span>
                      </div>
                      <div
                        className="input-field--content"
                      >
                        <textarea
                          className="input-field--content__text"
                          name="task[message]"
                          onChange={[Function]}
                          pattern=".*"
                          placeholder="Give a shoutout or offer some tips to the person who completed the task"
                          readOnly={false}
                          required={false}
                          value=""
                        />
                      </div>
                    </div>
                  </InputField>
                </InputFieldDescriptionMiddle>
                <InputFieldWhiteDark
                  eventHandler={[Function]}
                  min="0"
                  name="task[quantity]"
                  placeholder="The # of awards to send"
                  required={true}
                  step="0.01"
                  symbolLimit={0}
                  title="quantity"
                  type="number"
                  value={1}
                >
                  <InputField
                    checkboxText=""
                    checked={false}
                    className="input-field__white__dark"
                    copyOnClick={false}
                    disabled={false}
                    errorText=""
                    eventHandler={[Function]}
                    imgInputRef={null}
                    imgPreviewDimensions="40x40"
                    imgPreviewUrl=""
                    imgRequirements=""
                    imgVerifier={[Function]}
                    max=""
                    min="0"
                    name="task[quantity]"
                    pattern=".*"
                    placeholder="The # of awards to send"
                    readOnly={false}
                    recommended={false}
                    required={true}
                    selectEntries={Array []}
                    step="0.01"
                    symbolLimit={0}
                    title="quantity"
                    type="number"
                    value={1}
                  >
                    <div
                      className="input-field input-field__white__dark"
                    >
                      <div
                        className="input-field--title"
                      >
                        <span
                          className="input-field--title--title"
                        >
                          quantity
                        </span>
                        <span
                          className="input-field--title--required"
                        >
                          required
                        </span>
                      </div>
                      <div
                        className="input-field--content"
                      >
                        <input
                          className="input-field--content__text"
                          max=""
                          min="0"
                          name="task[quantity]"
                          onChange={[Function]}
                          onClick={null}
                          placeholder="The # of awards to send"
                          readOnly={false}
                          required={true}
                          step="0.01"
                          type="number"
                          value={1}
                        />
                      </div>
                    </div>
                  </InputField>
                </InputFieldWhiteDark>
                <div
                  className="task-award-form--form--field"
                >
                  <div
                    className="task-award-form--form--field--title"
                  >
                    total award amount (DMT)
                  </div>
                  <div
                    className="task-award-form--form--field--value"
                  >
                    100.00000000
                     × 
                    1
                     = 
                    100.00000000
                  </div>
                </div>
                <input
                  name="authenticity_token"
                  readOnly={true}
                  type="hidden"
                  value="00"
                />
              </form>
            </div>
          </div>
        </div>
        <div
          className="layout--subfooter"
        >
          <div
            className="layout--subfooter--buttons"
          >
            <Button
              className="metamask-transfer-btn"
              disabled={false}
              form="task-award-form--form"
              type="submit"
              value="proceed"
            >
              <input
                className="button metamask-transfer-btn"
                disabled={false}
                form="task-award-form--form"
                type="submit"
                value="proceed"
              />
            </Button>
            <ButtonBorder
              className=""
              onClick={[Function]}
              value="cancel"
            >
              <Button
                className="button__border"
                disabled={false}
                onClick={[Function]}
                type="button"
                value="cancel"
              >
                <input
                  className="button button__border"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                  value="cancel"
                />
              </Button>
            </ButtonBorder>
          </div>
        </div>
      </div>
    </Layout>
  </ProjectSetup>
</TaskShow>
`;
